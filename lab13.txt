13.1
a. What benefit did using the React Router bring to the application?
It allows us to add new screens that will flow quickly to our
application while also keeping the URL in sync with what is on the
page. 

b. Which is better, hash history or browser history?
One is not strictly better than another, they are just suited better to
different uses. House histery is better for browser based projects where
browser history is better for dynamic websites. Also, browser history 
allows for cleaner URLs while hash history leaves the hash at the end of
the URLs.

c. Why does the server (either Webpack Dev Server or the Express server)
have to be modified to support the browser history? Compare this with
the hash-based server demonstrated in class, which didn't require such
modifications.
The hash history is built in and so using hash history is actually a "hack."
When using browser history the server has to be modified because the server
doesn't innatley know how to deal with the URL which it is manipulating, so 
we must enable the server to handle the URL with the Webpack Dev Server and
change the relative paths to abosulte paths in index.html.

13.2
a. What state does the new CommentEdit component maintain and how does that
compare with the state maintained by the CommentBox component?
The CommentEdit component maintains props while the CommentBox component
maintains state.

b. What does the CommentEdit component do when the AJAX PUT or DELETE
methods return successfully? How does this compare with what the
“Cancel” button provided by the CommentEdit component does?
It updates the comment and/or editor and pushes the results to the server.
If the "Cancel" button was pushed, the comment would not be updated and
the results would not be pushed.

c. How is the Link added in the last step different from a simple HTML
hyperlink?
It is specific to the edit being made to the comment (as evidenced by 
the string of numbers at the end of the URL which is the id of the 
props comment).

